version: 3
vars:
  NODE_IDENTIFIERS: "node1,node2,node3"
  SOLO_NETWORK_SIZE: "3"
  DEPLOYMENT: "deployment-network-with-custom-config"
  NAMESPACE: "namespace-network-with-custom-config"
  CLUSTER_NAME: "network-with-custom-config-cluster"
  CONTEXT: "kind-network-with-custom-config-cluster"
  CLUSTER_REFERENCE: "kind-network-with-custom-config-cluster"
tasks:
  default:
    desc: Run a full standalone Solo network with block node, mirror node, and relay
    cmds:
      # Install Solo CLI
      - cmd: npm i @hashgraph/solo@latest

      # Create Kind cluster
      - cmd: kind create cluster -n {{ .CLUSTER_NAME }}

      # Wait for control plane
      - cmd: sleep 10 # wait for control plane to come up

      # Set kubectl context
      - cmd: kubectl config set-context {{ .CONTEXT }}

      # Solo init
      - cmd: npx solo init

      # Solo cluster-ref connect
      - cmd: npx solo cluster-ref connect --cluster-ref {{ .CLUSTER_REFERENCE }} --context {{ .CONTEXT }}

      # Solo deployment create
      - cmd: npx solo deployment create --deployment {{ .DEPLOYMENT }} --namespace {{ .NAMESPACE }}

      # Solo deployment add-cluster
      - cmd: |
          solo deployment add-cluster --deployment {{ .DEPLOYMENT }} --cluster-ref {{ .CLUSTER_REFERENCE }} \
          --num-consensus-nodes {{ .SOLO_NETWORK_SIZE }}

      # Solo cluster-ref setup
      - cmd: npx solo cluster-ref setup --cluster-ref {{ .CLUSTER_REFERENCE }}

      # Solo node keys
      - cmd: |
          solo node keys --gossip-keys --tls-keys --deployment {{ .DEPLOYMENT }} \
          --node-aliases {{ .NODE_IDENTIFIERS }}

      # Solo network deploy
      - cmd: |
          solo network deploy --deployment {{ .DEPLOYMENT }} --pvcs true --node-aliases {{ .NODE_IDENTIFIERS }} \
          --values-file {{ .USER_WORKING_DIR }}/init-containers-values.yaml \
          --settings-txt {{ .USER_WORKING_DIR }}/settings.txt \
          --log4j2-xml {{ .USER_WORKING_DIR }}/log4j2.xml \
          --application-properties {{ .USER_WORKING_DIR }}/application.properties

      # Solo node setup
      - cmd: npx solo node setup --node-aliases {{ .NODE_IDENTIFIERS }} --deployment {{ .DEPLOYMENT }}

      # Solo node start
      - cmd: npx solo node start --deployment {{ .DEPLOYMENT }} --node-aliases {{ .NODE_IDENTIFIERS }}

      # Solo mirror-node deploy
      - cmd: npx solo mirror-node deploy --deployment {{ .DEPLOYMENT }} --pinger --enable-ingress

      # Solo relay deploy
      - cmd: npx solo relay deploy --deployment {{ .DEPLOYMENT }} --node-aliases {{ .NODE_IDENTIFIERS }}

      # Solo explorer deploy
      - cmd: |
          solo explorer deploy --deployment {{ .DEPLOYMENT }} --cluster-ref {{ .CLUSTER_REFERENCE }} \
          --enable-explorer-tls --tls-cluster-issuer-type acme-staging \
          --enable-ingress \
          -n {{ .EXPLORER_NAME_SPACE }} --deployment {{ .EXPLORER_DEPLOYMENT }} \
          --cluster-ref {{ .CLUSTER_REFERENCE }}
  destroy:
    desc: Destroy the Solo network with block node
    cmds:
      # Solo node stop
      - cmd: npx solo node stop --deployment {{ .DEPLOYMENT }} --node-aliases {{ .NODE_IDENTIFIERS }}

      # Solo mirror-node destroy
      - cmd: npx solo mirror-node destroy --deployment {{ .DEPLOYMENT }} --force

      # Solo relay destroy
      - cmd: npx solo relay destroy --deployment {{ .DEPLOYMENT }} --node-aliases {{ .NODE_IDENTIFIERS }}

      # Solo explorer destroy
      - cmd: npx solo explorer destroy --deployment {{ .DEPLOYMENT }}

      # Solo network destroy
      - cmd: npx solo network destroy --deployment {{ .DEPLOYMENT }} --force

      # Delete Kind cluster
      - cmd: kind delete cluster -n {{ .CLUSTER_NAME }}
