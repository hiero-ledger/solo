version: 3

env:
  SOLO_COMMAND:
    sh: |
      if [ "${USE_RELEASED_VERSION}" = "true" ]; then
        echo "npx @hashgraph/solo"
      else
        echo "npm run solo --"
      fi

vars:
  POSTGRES_USERNAME: "postgres"
  POSTGRES_PASSWORD: "XXXXXXXX"
  POSTGRES_READONLY_USERNAME: "readonlyuser"
  POSTGRES_READONLY_PASSWORD: "XXXXXXXX"
  POSTGRES_MIRROR_NODE_DATABASE_NAME: "mirror_node"
  POSTGRES_NAME: "my-postgresql"
  POSTGRES_DATABASE_NAMESPACE: "database"
  POSTGRES_CONTAINER_NAME: "{{ .POSTGRES_NAME }}-0"
  POSTGRES_HOST_FQDN: "{{ .POSTGRES_NAME }}.database.svc.cluster.local"
  CLUSTER_NAME: "external-database-example-cluster"
  CONTEXT: "kind-external-database-example-cluster"
  CLUSTER_REF: "kind-external-database-example-cluster"
  DEPLOYMENT: "external-database-example-deployment"

  NETWORK_SIZE: "1"
  NAMESPACE: "external-database-example-namespace"
  SOLO_CLUSTER_RELEASE_NAME: "external-database-example-cluster-setup"
  NODE_ALIASES: "node1"
  SOLO_USER_DIR: "{{ default (printf \"%s/.solo\" (env \"HOME\")) }}"
tasks:
  default:
    desc: create the cluster, solo init, solo cluster-ref create, solo keys consensus generate, solo consensus network deploy
    cmds:
      # Install Solo CLI
      - cmd: |
          if [ "${USE_RELEASED_VERSION}" = "true" ]; then
            npm i @hashgraph/solo@latest
          else
            echo "Skipping npm install - using development version"
          fi

      # Create Kind cluster"
      - cmd: kind create cluster -n "{{ .CLUSTER_NAME }}"

      # Wait for control plane"
      - cmd: sleep 10 # wait for control plane to come up

      # Set kubectl context"
      - cmd: kubectl config set-context {{ .CONTEXT }}

      # Solo init"
      - cmd: $SOLO_COMMAND init

      # Solo cluster-ref config setup"
      - cmd: $SOLO_COMMAND cluster-ref config setup --quiet-mode --dev

      # Solo cluster-ref config connect"
      - cmd: $SOLO_COMMAND cluster-ref config connect --cluster-ref {{ .CLUSTER_REF }} --context {{ .CONTEXT }}

      # Solo deployment config create"
      - cmd: $SOLO_COMMAND deployment config create --namespace {{ .NAMESPACE }} --deployment {{ .DEPLOYMENT }} --realm 0 --shard 0

      # Solo deployment cluster attach"
      - cmd: $SOLO_COMMAND deployment cluster attach --cluster-ref {{ .CLUSTER_REF }} --deployment {{ .DEPLOYMENT }} --num-consensus-nodes {{ .NETWORK_SIZE }}

      # Solo node keys"
      - cmd: $SOLO_COMMAND keys consensus generate --gossip-keys --tls-keys --node-aliases {{ .NODE_ALIASES }} --deployment {{ .DEPLOYMENT }} --quiet-mode --dev

      # Solo network deploy"
      - cmd: $SOLO_COMMAND consensus network deploy --deployment {{ .DEPLOYMENT }} --node-aliases {{ .NODE_ALIASES }} --quiet-mode --dev

      # Solo node setup"
      - cmd: $SOLO_COMMAND consensus node setup --deployment {{ .DEPLOYMENT }} --node-aliases {{ .NODE_ALIASES }} --quiet-mode --dev

      # Solo node start"
      - cmd: $SOLO_COMMAND consensus node start --deployment {{ .DEPLOYMENT }} --node-aliases {{ .NODE_ALIASES }} --quiet-mode --dev

      # Install PostgreSQL using Helm"
      - cmd: |
          {{ .SOLO_USER_DIR }}/bin/helm install {{ .POSTGRES_NAME }} https://charts.bitnami.com/bitnami/postgresql-12.1.2.tgz \
          --set image.tag=16.4.0 \
          --namespace {{ .POSTGRES_DATABASE_NAMESPACE }} --create-namespace \
          --set global.postgresql.auth.postgresPassword={{ .POSTGRES_PASSWORD }} \
          --set primary.persistence.enabled=false --set secondary.enabled=false

      # Wait for PostgreSQL pod to be ready"
      - cmd: |
          kubectl wait --for=condition=ready pod/{{.POSTGRES_CONTAINER_NAME}} \
          -n {{ .POSTGRES_DATABASE_NAMESPACE }} --timeout=160s

      # Copy init.sql inside the database pod"
      - cmd: |
          kubectl cp {{ .TASKFILE_DIR }}/scripts/init.sh \
          {{ .POSTGRES_CONTAINER_NAME }}:/tmp/init.sh \
          -n {{ .POSTGRES_DATABASE_NAMESPACE }}

      # Make init.sh executable"
      - cmd: |
          kubectl exec -it {{ .POSTGRES_CONTAINER_NAME }} \
          -n {{ .POSTGRES_DATABASE_NAMESPACE }} -- chmod +x /tmp/init.sh

      # Execute init.sh inside the database pod"
      - cmd: |
          kubectl exec -it {{ .POSTGRES_CONTAINER_NAME }} \
          -n {{ .POSTGRES_DATABASE_NAMESPACE }} \
          -- /bin/bash /tmp/init.sh "{{ .POSTGRES_USERNAME }}" "{{ .POSTGRES_READONLY_USERNAME }}" "{{ .POSTGRES_READONLY_PASSWORD }}"

      # Solo mirror node add"
      - cmd: |
          $SOLO_COMMAND mirror node add --deployment {{ .DEPLOYMENT }} --cluster-ref {{ .CLUSTER_REF }} --use-external-database \
          --enable-ingress --external-database-host {{ .POSTGRES_HOST_FQDN }} \
          --external-database-owner-username {{ .POSTGRES_USERNAME }} --external-database-owner-password {{ .POSTGRES_PASSWORD }} \
          --external-database-read-username {{ .POSTGRES_READONLY_USERNAME }} \
          --external-database-read-password {{ .POSTGRES_READONLY_PASSWORD }} \
          --enable-ingress --pinger -q --dev

      # Solo explorer node add"
      - cmd: |
          $SOLO_COMMAND explorer node add --deployment {{ .DEPLOYMENT }} --cluster-ref {{ .CLUSTER_REF }} --mirrorNamespace {{ .NAMESPACE }} \
          --enable-explorer-tls --tls-cluster-issuer-type acme-staging --enable-ingress -q --dev

      # Copy database-seeding-query.sql to database pod"
      - cmd: |
          kubectl cp {{.HOME}}/.solo/cache/database-seeding-query.sql \
          {{ .POSTGRES_CONTAINER_NAME }}:/tmp/database-seeding-query.sql -n {{ .POSTGRES_DATABASE_NAMESPACE }}

      # Seed database with database-seeding-query.sql"
      - cmd: |
          kubectl exec -it {{ .POSTGRES_CONTAINER_NAME }} -n {{ .POSTGRES_DATABASE_NAMESPACE }} -- \
          env PGPASSWORD={{ .POSTGRES_PASSWORD }} psql -U {{ .POSTGRES_USERNAME }} -f /tmp/database-seeding-query.sql \
          -d {{ .POSTGRES_MIRROR_NODE_DATABASE_NAME }}

      # Solo relay node add"
      - cmd: $SOLO_COMMAND relay node add --deployment {{ .DEPLOYMENT }} --node-aliases {{ .NODE_ALIASES }} --quiet-mode --dev
      # Run solo smoke test"
      - cmd: |
          cd ../../
          export SOLO_DEPLOYMENT="{{ .DEPLOYMENT }}"
          export SOLO_NAMESPACE="{{ .NAMESPACE }}"
          ./.github/workflows/script/solo_smoke_test.sh
  destroy:
    desc: destroy example cluster
    cmds:
      # Delete Kind cluster"
      - cmd: kind delete cluster --name "{{ .CLUSTER_NAME }}"
