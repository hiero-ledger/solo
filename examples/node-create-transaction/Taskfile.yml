version: 3

env:
  SOLO_COMMAND:
    sh: |
      if [ "${USE_RELEASED_VERSION}" = "true" ]; then
        echo "npx @hashgraph/solo"
      else
        echo "npm run solo --"
      fi

vars:
  SOLO_NAMESPACE: "solo-ns"
  SOLO_DEPLOYMENT: "solo-deployment"
  SOLO_CLUSTER_NAME: "solo-cluster"
  SOLO_CLUSTER_REF: "solo-cluster-reference"
  SOLO_CLUSTER_SETUP_NAMESPACE: "{{.SOLO_NAMESPACE}}"
  CN_LOCAL_BUILD_PATH: "../hiero-consensus-node/hedera-node/data"
  LOCAL_BUILD_FLAG: "--local-build-path {{.CN_LOCAL_BUILD_PATH}}"
  CN_VERSION: "v0.65.1"
  TEMPORARY_DIR: "/tmp/solo-deployment"
  PREPARE_OUTPUT_DIR: "{{ .TEMPORARY_DIR }}/prepare-output"
  APPLICATION_PROPERTIES: "{{ .TEMPORARY_DIR }}/application.properties"
  APPLICATION_PROPERTIES_FLAG: "--application-properties {{.APPLICATION_PROPERTIES}}"

  # SOLO_COMMAND: "solo" # use this if running with installed version of Solo
tasks:
  default:
    desc: Run a full standalone Solo network with mirror node, relay and prepare for node operations
    dir: ../..
    cmds:
      # Install Solo CLI
      - cmd: |
          if [ "${USE_RELEASED_VERSION}" = "true" ]; then
            npm i @hashgraph/solo@latest
          else
            echo "Skipping npm install - using development version"
          fi

      - cmd: |
          # Clean up any existing Kind clusters
          for cluster in $(kind get clusters); do
            kind delete cluster -n $cluster
          done

      - cmd: |
          # Clean up Solo data
          rm -Rf ~/.solo

      - cmd: |
          # Create Kind cluster
          kind create cluster -n {{ .SOLO_CLUSTER_NAME }}

      - cmd: |
          # Solo init
          $SOLO_COMMAND init --dev

      - cmd: |
          # Solo cluster-ref config connect
          $SOLO_COMMAND cluster-ref config connect --cluster-ref {{ .SOLO_CLUSTER_REF }} --context kind-{{.SOLO_CLUSTER_NAME}} --dev

      - cmd: |
          # Solo deployment config create
          $SOLO_COMMAND deployment config create -n {{ .SOLO_NAMESPACE }} --deployment {{ .SOLO_DEPLOYMENT }} --dev

      - cmd: |
          # Solo deployment cluster attach
          $SOLO_COMMAND deployment cluster attach --deployment {{ .SOLO_DEPLOYMENT }} --cluster-ref {{ .SOLO_CLUSTER_REF }} \
          --num-consensus-nodes 2 --dev

      - cmd: |
          # Create prepare output directory
          mkdir -p {{.PREPARE_OUTPUT_DIR}}

      - cmd: |
          # Copy and update application.properties
          cp resources/templates/application.properties {{ .APPLICATION_PROPERTIES }}
          echo "contracts.evm.ethTransaction.zeroHapiFees.enabled=false" >> {{ .APPLICATION_PROPERTIES }}

      - cmd: |
          # Solo keys consensus generate
          $SOLO_COMMAND keys consensus generate --gossip-keys --tls-keys --deployment {{ .SOLO_DEPLOYMENT }} --dev

      - cmd: |
          # Solo cluster-ref config setup
          $SOLO_COMMAND cluster-ref config setup -s {{ .SOLO_CLUSTER_SETUP_NAMESPACE }} --dev

      - cmd: |
          # Solo consensus network deploy
          $SOLO_COMMAND consensus network deploy --deployment {{ .SOLO_DEPLOYMENT }} --release-tag {{ .CN_VERSION }} \
          --pvcs {{.APPLICATION_PROPERTIES_FLAG}} --dev

      - cmd: |
          # Solo consensus node setup
          $SOLO_COMMAND consensus node setup --deployment {{ .SOLO_DEPLOYMENT }} --release-tag {{ .CN_VERSION }} \
          {{.LOCAL_BUILD_FLAG}} --dev

      - cmd: |
          # Solo consensus node start
          $SOLO_COMMAND consensus node start --deployment {{ .SOLO_DEPLOYMENT }} --dev

      - cmd: |
          # Solo mirror node add
          $SOLO_COMMAND mirror node add --deployment {{ .SOLO_DEPLOYMENT }} \
          --cluster-ref {{ .SOLO_CLUSTER_REF }} --enable-ingress --dev

      - cmd: |
          # Solo explorer node add
          $SOLO_COMMAND explorer node add --deployment {{ .SOLO_DEPLOYMENT }} --cluster-ref {{ .SOLO_CLUSTER_REF }} \
          --dev

      - cmd: |
          # Solo relay node add
          $SOLO_COMMAND relay node add --node-aliases node1 --deployment {{ .SOLO_DEPLOYMENT }} \
          --cluster-ref {{ .SOLO_CLUSTER_REF }} --dev

      - cmd: |
          # Solo consensus dev-node-add prepare
          $SOLO_COMMAND consensus dev-node-add prepare --deployment {{ .SOLO_DEPLOYMENT }} --gossip-keys true --tls-keys true \
          --release-tag {{ .CN_VERSION }} --output-dir {{ .PREPARE_OUTPUT_DIR }} --pvcs --dev \
          --cluster-ref {{ .SOLO_CLUSTER_REF }}

      - cmd: |
          # SDK NodeCreateTransaction
          which node
          node --version
          node examples/node-create-transaction/solo-node-create-transaction.js

      - cmd: |
          # Prepare Upgrade
          $SOLO_COMMAND consensus dev-freeze prepare-upgrade --deployment {{ .SOLO_DEPLOYMENT }} --dev 

      - cmd: |
          # Freeze Upgrade
          $SOLO_COMMAND consensus dev-freeze freeze-upgrade --deployment {{ .SOLO_DEPLOYMENT }} --dev 

      - cmd: |
          # Solo consensus dev-node-add execute
          $SOLO_COMMAND consensus dev-node-add execute --deployment {{ .SOLO_DEPLOYMENT }} --input-dir {{ .PREPARE_OUTPUT_DIR }} \
          --pvcs {{ .LOCAL_BUILD_FLAG }} --dev --cluster-ref {{ .SOLO_CLUSTER_REF }}

      - cmd: |
          # Mirror Node gRPC port forward
          /bin/bash -c "nohup kubectl port-forward svc/mirror-1-grpc -n {{ .SOLO_NAMESPACE }} 5600:5600 > /dev/null 2>&1 &"

      - cmd: |
          # Mirror Node REST API port forward
          /bin/bash -c "nohup kubectl port-forward svc/mirror-1-rest -n {{ .SOLO_NAMESPACE }} 5551:80 > /dev/null 2>&1 &"

      - cmd: |
          # Mirror Node REST Java API port forward
          /bin/bash -c "nohup kubectl port-forward svc/mirror-1-restjava -n {{ .SOLO_NAMESPACE }} 8084:80 > /dev/null 2>&1 &"

      - cmd: |
          # Show active port forwards
          ps -ef | grep port-forward | grep -v grep

  destroy:
    desc: Destroy the Solo network with block node
    dir: ../..
    cmds:
      - cmd: |
          # Solo consensus node stop
          $SOLO_COMMAND consensus node stop --deployment {{ .SOLO_DEPLOYMENT }} --dev

      - cmd: |
          # Solo relay node destroy
          $SOLO_COMMAND relay node destroy --deployment {{ .SOLO_DEPLOYMENT }} --node-aliases node1 --dev \
          --cluster-ref {{ .SOLO_CLUSTER_REF }}

      - cmd: |
          # Solo explorer node destroy
          $SOLO_COMMAND explorer node destroy --deployment {{ .SOLO_DEPLOYMENT }} --force --dev

      - cmd: |
          # Solo mirror node destroy
          $SOLO_COMMAND mirror node destroy --deployment {{ .SOLO_DEPLOYMENT }} --force --dev

      - cmd: |
          # Solo consensus network destroy
          $SOLO_COMMAND consensus network destroy --deployment {{ .SOLO_DEPLOYMENT }} --force --dev --delete-pvcs --delete-secrets -q

      - cmd: |
          # Delete Kind cluster
          kind delete cluster -n {{ .SOLO_CLUSTER_NAME }}
