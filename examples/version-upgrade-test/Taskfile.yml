version: 3

env:
  SOLO_COMMAND:
    sh: |
      if [ "${USE_RELEASED_VERSION}" = "true" ]; then
        echo "npx @hashgraph/solo"
      else
        echo "npm run solo --"
      fi

vars:
  NODE_IDENTIFIERS: "node1,node2"
  SOLO_NETWORK_SIZE: "2"
  DEPLOYMENT: "deployment-version-upgrade-test"
  NAMESPACE: "namespace-version-upgrade-test"
  CLUSTER_NAME: "version-upgrade-test-cluster"
  CONTEXT: "kind-version-upgrade-test-cluster"
  CLUSTER_REFERENCE: "kind-version-upgrade-test-cluster"

  # Previous versions (current minus one)
  PREV_CN_VERSION: "v0.65.1"
  PREV_MIRROR_VERSION: "v0.138.0"
  PREV_EXPLORER_VERSION: "25.0.0"
  PREV_RELAY_VERSION: "0.69.0"
  PREV_BLOCK_VERSION: "v0.18.0"

  # Local build path for network upgrade
  CN_LOCAL_BUILD_PATH: "../hiero-consensus-node/hedera-node/data"
  LOCAL_BUILD_FLAG: "--local-build-path {{.CN_LOCAL_BUILD_PATH}}"

tasks:
  default:
    desc: Run full version upgrade test scenario
    cmds:
      - task: setup-cluster
      - task: deploy-old-versions
      - task: verify-block-functionality
      - task: upgrade-components
      - task: verify-block-functionality


  setup-cluster:
    desc: Setup Kind cluster and Solo environment
    cmds:
      # Install Solo CLI
      - cmd: |
          if [ "${USE_RELEASED_VERSION}" = "true" ]; then
            npm i @hashgraph/solo@latest
          else
            echo "Skipping npm install - using development version"
          fi

      # Delete existing Kind cluster if it exists
      - cmd: kind delete cluster -n {{ .CLUSTER_NAME }} || true
      # Create Kind cluster
      - cmd: kind create cluster -n {{ .CLUSTER_NAME }}

      # Wait for control plane
      - cmd: sleep 10

      # Set kubectl context
      - cmd: kubectl config set-context {{ .CONTEXT }}

      # Solo init
      - cmd: $SOLO_COMMAND init

      # Solo cluster-ref config setup
      - cmd: $SOLO_COMMAND cluster-ref config setup --quiet-mode --dev

      # Solo cluster-ref config connect
      - cmd: $SOLO_COMMAND cluster-ref config connect --cluster-ref {{ .CLUSTER_REFERENCE }} --context {{ .CONTEXT }}

      # Solo deployment config create
      - cmd: $SOLO_COMMAND deployment config create --deployment {{ .DEPLOYMENT }} --namespace {{ .NAMESPACE }}

      # Solo deployment cluster attach
      - cmd: |
          $SOLO_COMMAND deployment cluster attach --deployment {{ .DEPLOYMENT }} --cluster-ref {{ .CLUSTER_REFERENCE }} \
          --num-consensus-nodes {{ .SOLO_NETWORK_SIZE }}


  deploy-old-versions:
    desc: Deploy network with previous versions of all components
    cmds:
      # Deploy consensus network with previous version
      - cmd: |
          $SOLO_COMMAND keys consensus generate --gossip-keys --tls-keys --deployment {{ .DEPLOYMENT }} \
          --node-aliases {{ .NODE_IDENTIFIERS }}

      # Deploy block node with previous version
      # Must deploy block node before deploying consensus network due to dependency
      - cmd: |
          # set env var since old version of block node chart using different chart name
          export BLOCK_NODE_CHART=block-node-helm-chart
          $SOLO_COMMAND block node add --deployment {{ .DEPLOYMENT }} --release-tag {{ .PREV_CN_VERSION }} \
          --chart-version {{ .PREV_BLOCK_VERSION }} --cluster-ref {{ .CLUSTER_REFERENCE }}

      - cmd: |
          $SOLO_COMMAND consensus network deploy --deployment {{ .DEPLOYMENT }} --pvcs true --node-aliases {{ .NODE_IDENTIFIERS }} \
          --release-tag {{ .PREV_CN_VERSION }}

      - cmd: $SOLO_COMMAND consensus node setup --node-aliases {{ .NODE_IDENTIFIERS }} --deployment {{ .DEPLOYMENT }} --release-tag {{ .PREV_CN_VERSION }}

      - cmd: $SOLO_COMMAND consensus node start --deployment {{ .DEPLOYMENT }} --node-aliases {{ .NODE_IDENTIFIERS }}


  upgrade-components:
    desc: Upgrade all components to current versions
    cmds:

      # Upgrade block node
      - cmd: |
          npm run solo-test -- consensus node stop -i node1,node2 --deployment {{ .DEPLOYMENT }}
          helm get all block-node-1 -n {{ .NAMESPACE }} > fail_before_upgrade.log
          $SOLO_COMMAND block node upgrade --deployment {{ .DEPLOYMENT }}  \
          --cluster-ref {{ .CLUSTER_REFERENCE }}
          helm get all block-node-1 -n {{ .NAMESPACE }} > fail_after_upgrade.log
          npm run solo-test -- consensus node start -i node1,node2 --deployment {{ .DEPLOYMENT }}

  verify-block-functionality:
    desc: Verify all components are working correctly
    cmds:
      # Test Block Node functionality
      - cmd: |
          npm run solo-test -- ledger account create -d {{ .DEPLOYMENT }}
          sleep 20 # wait for block node to be ready
          curl http://127.0.0.1:40840 || true # kill old port-forward after block node pod restarts
          kubectl port-forward --namespace {{ .NAMESPACE }} svc/block-node-1 40840:40840 &
          sleep 5 # wait for port-forward to be established

          ps -ef|grep port-forward 

          cd ../../test/data          
          OUTPUT=$(./get-block.sh 1)
          cd -
          # echo "$OUTPUT"
          if echo "$OUTPUT" | grep -q '"status": "SUCCESS"'; then
            echo "✓ Block node test passed - status is SUCCESS"
          else
            echo "✗ Block node test failed - status is not SUCCESS"
            exit 1
          fi

  destroy:
    desc: Destroy the Solo network and cleanup
    cmds:
      # Stop consensus nodes
      - cmd: $SOLO_COMMAND consensus node stop --deployment {{ .DEPLOYMENT }} --node-aliases {{ .NODE_IDENTIFIERS }}

      # Destroy explorer
      - cmd: $SOLO_COMMAND explorer node destroy --deployment {{ .DEPLOYMENT }} --force

      # Destroy relay
      - cmd: $SOLO_COMMAND relay node destroy --deployment {{ .DEPLOYMENT }} --node-aliases {{ .NODE_IDENTIFIERS }}

      # Destroy mirror node
      - cmd: $SOLO_COMMAND mirror node destroy --deployment {{ .DEPLOYMENT }} --force

      # Destroy block node
      - cmd: $SOLO_COMMAND block node destroy --deployment {{ .DEPLOYMENT }}

      # Destroy consensus network
      - cmd: $SOLO_COMMAND consensus network destroy --deployment {{ .DEPLOYMENT }} --force

      # Delete Kind cluster
      - cmd: kind delete cluster -n {{ .CLUSTER_NAME }}

      # Cleanup temp files
      - cmd: rm -f /tmp/first_account_id.txt

      - echo "Cleanup completed"

  status:
    desc: Check status of all components
    cmds:
      - cmd: kubectl get pods -n {{ .NAMESPACE }}
      - cmd: kubectl get services -n {{ .NAMESPACE }}
      - echo "Status check completed"
