version: 3

env:
  SOLO_COMMAND:
    sh: |
      echo "npm run solo --"

vars:
  NODE_IDENTIFIERS: "node1,node2"
  SOLO_NETWORK_SIZE: "2"
  DEPLOYMENT: "solo-deployment"
  NAMESPACE: "solo-e2e"
  CLUSTER_NAME: "solo-e2e"
  CONTEXT: "kind-solo-e2e"
  CLUSTER_REFERENCE: "kind-solo-e2e"
  CLUSTER_SETUP_NAMESPACE: "solo-setup"

  # Previous versions (current minus one)
  PREV_CN_VERSION: "v0.65.1"
  PREV_MIRROR_VERSION: "v0.138.0"
  PREV_EXPLORER_VERSION: "25.0.0"
  PREV_RELAY_VERSION: "0.69.0"
  PREV_BLOCK_VERSION: "v0.18.0"


tasks:
  default:
    desc: Run full block node test scenario
    cmds:
      - task: setup-cluster
      - task: deploy-network
      - task: verify-block-functionality
      - task: upgrade-block-node
      - task: verify-block-functionality


  setup-cluster:
    desc: Setup Kind cluster and Solo environment
    cmds:
      # Delete existing Kind cluster if it exists
      - cmd: kind delete cluster -n {{ .CLUSTER_NAME }} || true
      # Create Kind cluster
      - cmd: kind create cluster -n {{ .CLUSTER_NAME }}

      # Cleanup solo data
      - cmd: rm -rf ~/.solo/* || true
      - cmd: rm -rf test/data/tmp/* || true

      # Solo cluster-ref config connect
      - cmd: $SOLO_COMMAND cluster-ref config connect --cluster-ref {{ .CLUSTER_REFERENCE }} --context {{ .CONTEXT }}

      # Solo deployment config create
      - cmd: $SOLO_COMMAND deployment config create --deployment {{ .DEPLOYMENT }} --namespace {{ .NAMESPACE }}

      # Solo deployment cluster attach
      - cmd: |
          $SOLO_COMMAND deployment cluster attach --deployment {{ .DEPLOYMENT }} --cluster-ref {{ .CLUSTER_REFERENCE }} \
          --num-consensus-nodes {{ .SOLO_NETWORK_SIZE }}

      # Solo cluster-ref config setup
      - cmd: $SOLO_COMMAND cluster-ref config setup -s {{ .CLUSTER_SETUP_NAMESPACE }}

  deploy-network:
    desc: Deploy block nodes and consensus network
    cmds:
      # Deploy block node with specific chart name for older versions
      - cmd: |
          $SOLO_COMMAND keys consensus generate --gossip-keys --tls-keys --deployment {{ .DEPLOYMENT }} \
          --node-aliases {{ .NODE_IDENTIFIERS }}

      # Deploy block node with previous version
      # Must deploy block node before deploying consensus network due to dependency
      - cmd: |
          # set env var since old version of block node chart using different chart name
          export BLOCK_NODE_CHART=block-node-helm-chart
          $SOLO_COMMAND block node add --deployment {{ .DEPLOYMENT }} --release-tag {{ .PREV_CN_VERSION }} \
          --chart-version {{ .PREV_BLOCK_VERSION }} --cluster-ref {{ .CLUSTER_REFERENCE }}

      - cmd: |
          $SOLO_COMMAND consensus network deploy --deployment {{ .DEPLOYMENT }} --pvcs true --node-aliases {{ .NODE_IDENTIFIERS }} \
          --release-tag {{ .PREV_CN_VERSION }}

      - cmd: $SOLO_COMMAND consensus node setup --node-aliases {{ .NODE_IDENTIFIERS }} --deployment {{ .DEPLOYMENT }} --release-tag {{ .PREV_CN_VERSION }}

      - cmd: $SOLO_COMMAND consensus node start --deployment {{ .DEPLOYMENT }} --node-aliases {{ .NODE_IDENTIFIERS }}

  verify-block-functionality:
    desc: Setup port-forward and verify block node is working correctly
    cmds:
      - cmd: |
          $SOLO_COMMAND ledger account create -d {{ .DEPLOYMENT }}
          sleep 20 # wait for block node to be ready
          curl http://127.0.0.1:40840 || true # kill old port-forward after block node pod restarts
          kubectl port-forward --namespace {{ .NAMESPACE }} svc/block-node-1 40840:40840 &
          sleep 5 # wait for port-forward to be established

          ps -ef|grep port-forward 

          cd ../../test/data          
          OUTPUT=$(./get-block.sh 1)
          echo "$OUTPUT" | tail -n 30
          if echo "$OUTPUT" | grep -q '"status": "SUCCESS"'; then
            echo "✓ Block node test passed - status is SUCCESS"
          else
            echo "✗ Block node test failed - status is not SUCCESS"
            exit 1
          fi
          cd -

  upgrade-block-node:
    desc: Upgrade block node to latest version
    cmds:

      # Upgrade block node
      - cmd: |
          $SOLO_COMMAND block node upgrade --deployment {{ .DEPLOYMENT }} --cluster-ref {{ .CLUSTER_REFERENCE }}
          # fake success, only get the block before the restart
