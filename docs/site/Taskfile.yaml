version: 3
output: prefixed
dotenv:
  - .env
silent: false
includes:
  github:
    taskfile: ./Taskfile.github.yaml
    flatten: true
  install:
    taskfile: ./Taskfile.install.yaml
    flatten: true
  mutate:
    taskfile: ./Taskfile.mutate.yaml
    flatten: true
  npmjs:
    taskfile: ./Taskfile.npmjs.yaml
    flatten: true
env:
  HUGO_ENVIRONMENT: production
  HUGO_ENV: production
  HUGO_ORIGIN: https://solo.hiero.org/
  HUGO_LOCAL_ORIGIN: http://localhost:1313/
  HUGO_HOST: solo.hiero.org
  HUGO_SOLO_VERSION: main
  HUGO_BASEPATH: /
vars:
  hugo_base_url: "${HUGO_ORIGIN}${HUGO_SOLO_VERSION}/"
  hugo_local_base_url: "${HUGO_LOCAL_ORIGIN}${HUGO_SOLO_VERSION}/"

tasks:
  default:
    desc: "List all available tasks"
    cmds:
      - task --list

  build:clean:
    desc: "Clean then build the documentation site"
    cmds:
      - task: "check-doc-dir"
      - task: "clean"
      - task: "install"
      - task: "mutate:readme"
      - task: "mutate:dev"
      - task: "build"

  build:
    desc: "Build the documentation site"
    cmds:
      - task: "check-doc-dir"
      - task: "install"
      - task: "mutate:readme"
      - task: "mutate:dev"
      - task: "build:all"

  check-doc-dir:
    desc: "Check if in the docs/site directory"
    silent: true
    status:
      - |
        if [ "$(basename "$PWD")" != "site" ]; then
          exit 1
        fi
    cmds:
      - |
        echo "Error: Must be in the 'docs/site' directory."
        exit 1

  clean:
    desc: "Remove artifacts that are automatically generated"
    silent: true
    cmds:
      - rm -Rf build
      - rm -Rf static/classes
      - rm -Rf public/${HUGO_SOLO_VERSION}
      - rm -Rf resources
      - rm -f .hugo_build.lock

  build:all:
    desc: "Perform the build operations: typedoc, cli help, and hugo"
    cmds:
      - task: "build:typedoc"
      - task: "build:cli:help"
      - task: "build:guide"
      - task: "solo:version"
      - task: "npmjs:latest:solo:version"
      - task: "npmjs:list:solo:versions"
      - task: "github:list:solo:releases"
      - task: "github:augment:releases"
      - task: "github:download:solo:assets"
      - task: "github:extract:latest"
      - task: "github:extract:versioned"
      - task: "github:update:hugo:config"
      - task: "build:hugo"
      - task: "build:doc:artifacts"

  build:solo:
    desc: "Build the Solo CLI"
    dir: ../..
    silent: true
    sources:
      - src/**/*.ts
      - version.ts
      - solo.ts
    generates:
      - dist/**/*.js
    cmds:
      - rm -Rf dist
      - npx tsc
      - node {{.TASKFILE_DIR}}/../../resources/post-build-script.js

  build:cli:help:
    desc: "Generate the CLI help documentation"
    silent: true
    dir: ../..
    sources:
      - src/**/*.ts
      - version.ts
      - solo.ts
      - docs/site/generate_help.sh
    generates:
      - docs/site/content/en/docs/solo-commands.md
    cmds:
      - printf "\r::group::Generating CLI help documentation\n"
      - rm -f docs/site/content/en/docs/solo-commands.md
      - chmod 755 docs/site/generate_help.sh
      - task: "build:solo"
      - docs/site/generate_help.sh
      - printf "\r::endgroup::--------------\n"

  build:guide:
    desc: "Build the Step-by-Step Guide"
    silent: true
    dir: ../..
    sources:
      - src/**/*.ts
      - version.ts
      - solo.ts
      - docs/site/content/en/templates/step-by-step-guide.template.md
      - docs/site/update_md.sh
      - docs/site/wrapper_for_update_md.sh
    generates:
      - docs/site/content/en/step-by-step-guide.md
    cmds:
      - printf "\r::group::Building the Step-by-Step Guide\n"
      - rm -f docs/site/content/en/step-by-step-guide.md
      - chmod 755 docs/site/update_md.sh
      - chmod 755 docs/site/wrapper_for_update_md.sh
      - task: "build:solo"
      - |
        if [[ "${SOLO_CI}" == "true" ]]; then
          echo "Running wrapper_for_update_md.sh in CI mode"
          docs/site/wrapper_for_update_md.sh
        else
          echo "Running update_md.sh in local mode"
          docs/site/update_md.sh
        fi
      - printf "\r::endgroup::--------------\n"

  build:hugo:
    desc: "Build the Hugo site"
    silent: true
    cmds:
      - echo "origin              $HUGO_ORIGIN"
      - echo "host                $HUGO_HOST"
      - echo "base_path           $HUGO_BASEPATH"
      - echo "solo vers           $HUGO_SOLO_VERSION"
      - echo "hugo_base_url       {{.hugo_base_url}}"
      - echo "hugo_local_base_url {{.hugo_local_base_url}}"
      - hugo version
      - printf "\r::group::Building the Hugo site\n"
      - hugo config
      - hugo --cleanDestinationDir -e prod --gc --minify --baseURL "{{.hugo_base_url}}" -d public/${HUGO_SOLO_VERSION}
      - echo "Hugo site built successfully. RC=${?}"
      - printf "\r::endgroup::--------------\n"

  solo:version:
    desc: "Display the version of the Solo CLI from the package.json and write it to a file"
    dir: ../..
    silent: true
    cmds:
      - |
        BUILD_DIR=docs/site/build
        SOLO_VERSION_FILE=$BUILD_DIR/version.txt
        mkdir -p $BUILD_DIR
        touch $BUILD_DIR/github-releases.json
        echo -n "v$(node -p "require('./package.json').version")" > $SOLO_VERSION_FILE
        SOLO_VERSION=$(<"$SOLO_VERSION_FILE")
        SOLO_VERSION=$(echo "$SOLO_VERSION" | tr -d '\r\n[:space:]')
        echo "Solo CLI version: $SOLO_VERSION"
        echo "Run the following command to build the site with the current version: $SOLO_VERSION"
        echo "HUGO_SOLO_VERSION=$SOLO_VERSION task build" 
        cp docs/site/hugo-template.yaml docs/site/hugo.yaml
        if [ "$HUGO_SOLO_VERSION" != "main" ]; then
         echo "    - {version: $SOLO_VERSION, url: /$SOLO_VERSION}">> docs/site/hugo.yaml
        fi

  build:doc:artifacts:
    desc: "Builds a ./build/latest.tar.gz file and a ./build/${SOLO_VERSION}.tar.gz file from the directories in the public directory"
    silent: true
    preconditions:
      - msg: "tar command is required to create the documentation artifacts."
        sh: command -v tar
    requires:
      vars: [HUGO_SOLO_VERSION]
    cmds:
      - |
        printf "\r::group::Building documentation artifacts\n"
        CURRENT_DIRECTORY=$(pwd) && echo "CURRENT_DIRECTORY-directory=${CURRENT_DIRECTORY}"
        mkdir -p build/${HUGO_SOLO_VERSION}/latest
        if ! [[ -f public/index.html ]]; then
          echo "Error: public/index.html not found."
          exit 1
        fi
        sed -e "s|/latest|/${HUGO_SOLO_VERSION}|g" public/index.html > build/${HUGO_SOLO_VERSION}/latest/index.html
        cd build/${HUGO_SOLO_VERSION}
        CURRENT_DIRECTORY=$(pwd) && echo "CURRENT_DIRECTORY-directory=${CURRENT_DIRECTORY}"
        ls -al
        tar -czf docs-latest.tar.gz latest
        if [[ $? -ne 0 ]]; then
          echo "Error: Failed to create latest.tar.gz"
          exit 1
        fi
        cd ../../public
        CURRENT_DIRECTORY=$(pwd) && echo "CURRENT_DIRECTORY-directory=${CURRENT_DIRECTORY}"
        tar -czf ../build/${HUGO_SOLO_VERSION}/docs-${HUGO_SOLO_VERSION}.tar.gz ${HUGO_SOLO_VERSION}
        if [[ $? -ne 0 ]]; then
          echo "Error: Failed to create ${HUGO_SOLO_VERSION}.tar.gz"
          exit 1
        fi
        cd ..
        CURRENT_DIRECTORY=$(pwd) && echo "CURRENT_DIRECTORY-directory=${CURRENT_DIRECTORY}"
        printf "\r::endgroup::--------------\n"

  build:typedoc:
    desc: "Generate the API documentation using TypeDoc"
    dir: ../..
    silent: true
    sources:
      - src/**/*.ts
      - version.ts
      - solo.ts
    generates:
      - docs/site/static/classes/**/*.*
    cmds:
      - printf "\r::group::Generating API documentation\n"
      - npx typedoc --excludeExternals --out docs/site/static/classes --entryPoints ./solo.ts --entryPoints ./src/index.ts --entryPointStrategy expand ./src
      - printf "\r::endgroup::--------------\n"

  local:
    desc: "Run the local server for only current version"
    silent: true
    cmds:
      - task: "build"
      - hugo server --cleanDestinationDir -e dev -DFE --minify serve --baseURL "{{.hugo_local_base_url}}" -d public/${HUGO_SOLO_VERSION}

  deploy:nginx:
    desc: "Build the Hugo site, configure Nginx, then deploy Nginx to serve the Hugo site for testing multiple versions"
    cmds:
      - task: "build"
      - task: "deploy:nginx:config"
      - task: "deploy:nginx:start"

  deploy:nginx:config:
    desc: "Configure Nginx to serve the Hugo site for testing multiple versions"
    silent: true
    cmds:
      - task: "install:nginx"
      - |
        if [ ! -d "nginx" ]; then
          mkdir -p nginx
        fi
      - |
        cat > nginx/nginx.conf << 'EOF'
        worker_processes  1;

        events {
            worker_connections  1024;
        }

        http {
            include       mime.types;
            default_type  application/octet-stream;

            sendfile        on;
            keepalive_timeout  65;

            server {
                listen       7777;
                server_name  localhost;

                root   {{.TASKFILE_DIR}}/public;
                index  index.html index.htm;

                location / {
                    try_files $uri $uri/ /index.html;
                }

                error_page   500 502 503 504  /50x.html;
                location = /50x.html {
                    root   html;
                }
            }
        }
        EOF

  deploy:nginx:start:
    desc: "Start Nginx with the Hugo site configuration for testing multiple versions"
    silent: true
    cmds:
      - |
        if pgrep nginx > /dev/null; then
          echo "Stopping existing Nginx..."
          nginx -s stop
        fi
      - |
        echo "Starting Nginx... on http://localhost:7777"
        nginx -c {{.TASKFILE_DIR}}/nginx/nginx.conf

  deploy:nginx:stop:
    desc: "Stop Nginx"
    silent: true
    cmds:
      - |
        if pgrep nginx > /dev/null; then
          echo "Stopping Nginx..."
          nginx -s stop
        else
          echo "Nginx is not running"
        fi
