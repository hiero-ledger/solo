// SPDX-License-Identifier: Apache-2.0
syntax = "proto3";

package org.hiero.block.api;

option java_package = "org.hiero.block.api.protoc";
// <<<pbj.java_package = "org.hiero.block.api">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "block-node/api/shared_message_types.proto";

/**
 * A request to stream block items from block node to a client.
 *
 * The block node SHALL respond to this request with a stream of
 * `SubscribeStreamResponse` messages.<br/>
 * The block node SHALL stream the full contents of the blocks requested.<br/>
 * The block items SHALL be streamed in order originally produced within
 * a block.<br/>
 * The blocks SHALL be streamed in ascending order by `block_number`.<br/>
 * The block node SHALL end the stream when the last requested block has
 * been sent.<br/>
 * The block node SHALL end the stream with a response code status of SUCCESS
 * when the stream is complete.<br/>
 * The client SHOULD call the `serverStatus` rpc prior to constructing this
 * request to determine the available start and end blocks.
 */
message SubscribeStreamRequest {
    /**
     * A block number to start the stream.
     * <p>
     * This SHALL be the block number of the first block returned.<br/>
     * This field MUST be less than or equal to the latest available
     * block number.
     */
    uint64 start_block_number = 1;

    /**
     * A block number to end the stream.<br/>
     * <p>
     * This field MAY be `uint64_max` to indicate the stream SHOULD continue
     * indefinitely, streaming new blocks as each becomes available.<br/>
     * If this value is less than `uint64_max` (`0xFFFFFFFFFFFFFFFF`)
     * <ul>
     *   <li>This value SHALL be the number of the last block returned.</li>
     *   <li>This field MUST NOT be less than `start_block_number`.</li>
     *   <li>This MAY be a block number that is immediately available
     *       from the block node.</li>
     *   <li>A block node SHALL continue to stream blocks until the last
     *       requested block is transmitted.</li>
     *   <li>A block node implementation MAY reject a request for a block
     *       that is not yet available.</li>
     *   <li>A block node implementation MAY accept future block numbers.</li>
     *   <li>Block node implementations MAY charge increased fees for such
     *       "future" streams.</li>
     * </ul>
     */
    uint64 end_block_number = 2;
}

/**
 * One item in a stream of `subscribeBlockStream` responses.
 *
 * The block node SHALL respond to a `subscribeBlockStream` request with a
 * stream of `SubscribeStreamResponse` messages.<br/>
 * The block node SHALL stream the full contents of the blocks requested.<br/>
 * The block items SHALL be streamed in order originally produced within
 * a block.<br/>
 * The blocks SHALL be streamed in ascending order by `block_number`.<br/>
 * The block node SHALL end the stream when the last requested block has
 * been sent.<br/>
 * The block node SHALL end the stream with a response code status of SUCCESS
 * when the stream is complete.<br/>
 * The block node SHALL end the stream with a response code status of
 * `INVALID_START_BLOCK_NUMBER` if the start block number is
 * greater than the end block number.<br/>
 * The block node SHALL make every reasonable effort to fulfill as much of the
 * request as available balance supports, in the event balance is not
 * sufficient to complete the request.
 */
message SubscribeStreamResponse {
    /**
    * An enumeration indicating the status of this request.
    *
    * This response code SHALL be the last message in the stream of responses.
    * This code SHALL represent the final status of the full request.
    */
    enum Code {
        /**
         * An "unset value" flag, this value SHALL NOT be used.<br/>
         * This status indicates the server software failed to set a status,
         * and SHALL be considered a software defect.
         */
        UNKNOWN = 0;

        /**
         * The request succeeded.
         * <p>
         * The requested block(s) SHALL precede the status response
         * with this value.
         */
        SUCCESS = 1;

        /**
         * The requested start block number is not valid.<br/>
         * The start block number is after the end block number, less
         * than `0`, or otherwise invalid.<br/>
         * The client MAY retry this request, but MUST change the
         * `start_block_number` field to a valid start block.
         */
        INVALID_START_BLOCK_NUMBER = 2;

        /**
         * The requested end block number is not valid.<br/>
         * The end block number is less than `start_block_number`
         * or otherwise invalid.<br/>
         * The client MAY retry this request, but MUST change the
         * `end_block_number` field to a valid end block.
         */
        INVALID_END_BLOCK_NUMBER = 3;

        /**
         * The requested stream is not available.<br/>
         * The client MAY retry again later.
         */
        NOT_AVAILABLE = 4;
    }

    oneof response {
        /**
         * A final response item describing the terminal status of this stream.
         * <p>
         * The block node server SHALL end the stream following this message.
         */
        Code status = 1;

        /**
         * A stream response item containing one or more `BlockItem`s.
         * <p>
         * The full stream SHALL consist of many `block_items` messages
         * followed by a single `status` message.
         */
        BlockItemSet block_items = 2;
    }
}

/**
 * Remote procedure calls (RPCs) for the Block Node block stream subscribing services.
 */
service BlockStreamSubscribeService {
    /**
     * Subscribe to a stream of blocks.
     * <p>
     * Each item in the stream SHALL contain one `BlockItem` or a
     * response code.<br/>
     * The request message MUST specify start and end block numbers
     * to return/<br/>
     * The block node SHALL stream the full contents of the blocks
     * requested.<br/>
     * The block items SHALL be streamed in order originally produced within
     * a block.<br/>
     * The blocks shall be streamed in ascending order by `block_number`.<br/>
     * The block node SHALL end the stream when the last requested block,
     * if set, has been sent.<br/>
     * A request with an end block of `uint64_max` SHALL be interpreted to
     * indicate the stream has no end. The block node SHALL continue to stream
     * new blocks as soon as each becomes available.<br/>
     * The block node SHALL end the stream with response code containing a
     * status of SUCCESS when the stream is complete.<br/>
     * The block node SHALL end the stream with a response code containing a
     * status of `INVALID_START_BLOCK_NUMBER` if the start block
     * number is greater than the end block number.<br/>
     * The block node SHALL make every reasonable effort to fulfill as much
     * of the request as possible in the event payment is not sufficient to
     * complete the request.
     */
    rpc subscribeBlockStream(SubscribeStreamRequest) returns (stream SubscribeStreamResponse);
}
