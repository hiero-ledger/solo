##
# Copyright (C) 2023-2024 Hedera Hashgraph, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

name: "Deploy Release Artifact"
on:
  workflow_dispatch:
    inputs:
      dry-run-enabled:
        description: "Perform Dry Run"
        type: boolean
        required: false
        default: false

env:
  REGISTRY: ghcr.io

defaults:
  run:
    shell: bash

permissions:
  contents: write
  packages: write
  pages: write
  id-token: write

jobs:
  prepare-release:
    name: Release / Prepare
    runs-on: hiero-solo-linux-medium
    outputs:
      version: ${{ steps.tag.outputs.version }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 20.19.3

      - name: Install Semantic Release
        run: |
          npm install -g semantic-release@21.0.7 @semantic-release/git@10.0.1 @semantic-release/exec@6.0.3 gradle-semantic-release-plugin@1.7.6
          npm install -g conventional-changelog-conventionalcommits@6.1.0 @commitlint/cli@17.6.6 @commitlint/config-conventional@17.6.6
          npm install -g marked-mangle@1.0.1 marked-gfm-heading-id@3.0.4 semantic-release-conventional-commits@3.0.0

      - name: Calculate Next Version
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
        run: |
          npx semantic-release --dry-run
          ls -al
          cat VERSION

      - name: Extract Version
        id: tag
        run: |
          cat VERSION
          [[ "${{ github.event.inputs.dry-run-enabled }}" == true && ! -f VERSION ]] && echo -n "0.0.0-latest" > VERSION
          TRIMMED_VERSION=$(cat VERSION | tr -d '[:space:]')
          echo "version=${TRIMMED_VERSION}" >> $GITHUB_OUTPUT
          echo "version=${TRIMMED_VERSION}"

  create-github-release:
    name: Github / Release
    runs-on: hiero-solo-linux-medium
    needs:
      - prepare-release
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Install GnuPG Tools
        run: |
          if ! command -v gpg2 >/dev/null 2>&1; then
            echo "::group::Updating APT Repository Indices"
              sudo apt update
            echo "::endgroup::"
            echo "::group::Installing GnuPG Tools"
              sudo apt install -y gnupg2
            echo "::endgroup::"
          fi

      - name: Import GPG key
        id: gpg_key
        uses: step-security/ghaction-import-gpg@c86c374c0659a6c2d1284bccf8af889e73ce8fe0 # v6.3.0
        with:
          gpg_private_key: ${{ secrets.GPG_KEY_CONTENTS }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: false

      - name: Install Task
        uses: arduino/setup-task@b91d5d2c96a56797b48ac1e0e89220bf64044611 # v2.0.0
        with:
          version: 3.39.2
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 20.19.3

      - name: Build Production Distribution
        run: |
          set -eo pipefail
          npm install
          echo "VERSION=${{ needs.prepare-release.outputs.version }}"
          [[ -n "${{ needs.prepare-release.outputs.version }}" ]] && npm version ${{ needs.prepare-release.outputs.version }} -f --no-git-tag-version --allow-same-version
          task build

      - name: Upload Logs
        if: ${{ always() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          path: /home/runner/.npm/_logs

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@ff5cb544114ffc152db9cea1cd3d5978d5074946 # v4.5.11
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Show JFrog Config
        run: jfrog config show

      - name: Verify JFrog Connectivity
        run: jfrog rt ping

      - name: Setup JFrog NPM Repository
        run: |
          jf npmc --server-id-resolve setup-jfrog-cli-server --server-id-deploy setup-jfrog-cli-server --repo-resolve solo-npm-release --repo-deploy solo-npm-release
          echo "::group::JFrog NPM Repository Configuration"
            cat .jfrog/projects/npm.yaml
          echo "::endgroup::"

      - name: Install Semantic Release
        run: |
          npm install -g semantic-release@21.0.7 @semantic-release/git@10.0.1 @semantic-release/exec@6.0.3 gradle-semantic-release-plugin@1.7.6
          npm install -g conventional-changelog-conventionalcommits@6.1.0 @commitlint/cli@17.6.6 @commitlint/config-conventional@17.6.6
          npm install -g marked-mangle@1.0.1 marked-gfm-heading-id@3.0.4 semantic-release-conventional-commits@3.0.0

      - name: Install Dependencies
        run: jf npm ci

      - name: Setup NPM Authentication
        run: |
          # create .npmrc file to publish solo to Github NPM registry
          rm -f .npmrc || true
          echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > ".npmrc"
          echo '@hashgraph:registry=https://registry.npmjs.org/' >> ".npmrc"

      - name: Publish Semantic Release
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
        if: ${{ github.event.inputs.dry-run-enabled != 'true' && !cancelled() && !failure() }}
        run: npx semantic-release

      - name: Deploy to JFrog Registry
        if: ${{ github.event.inputs.dry-run-enabled != 'true' && !cancelled() && !failure() }}
        run: jf npm publish

  setup:
    name: Hugo Docs Setup
    runs-on: hiero-solo-linux-medium
    outputs:
      tag-ref: ${{ steps.set-inputs.outputs.tag_ref }}
    needs:
      - prepare-release
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Set Inputs
        id: set-inputs
        run: |
          set -eo pipefail
          if [[ "${{ inputs.dry-run-enabled }}" == 'true' ]]; then
            echo "Dry run enabled, setting ref to `github.ref` since tag won't exist."
            echo "tag_ref=${{ github.ref }}" >> $GITHUB_OUTPUT
            echo "tag_ref=${{ github.ref }}"
          else
            echo "Dry run not enabled, setting ref to 'refs/tags/v${{ needs.prepare-release.outputs.version }}'."
            echo "tag_ref=refs/tags/v${{ needs.prepare-release.outputs.version }}" >> $GITHUB_OUTPUT
            echo "tag_ref=refs/tags/v${{ needs.prepare-release.outputs.version }}"
          fi

  # Do a Hugo build for the docs site for the release branch
  hugo-docs-build:
    name: Hugo Docs Build
    uses: ./.github/workflows/zxc-hugo-build.yaml
    needs:
      - prepare-release
      - create-github-release
      - setup
    with:
      docs-build-label: 'v${{ needs.prepare-release.outputs.version }}'
      ref: ${{ needs.setup.outputs.tag-ref }}
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  # Do a Hugo build for the docs site for the main branch, required to ensure that docs for the main branch get deployed
  #  to GitHub Pages
  hugo-docs-build-main:
    name: Hugo Docs Build Main
    uses: ./.github/workflows/zxc-hugo-build.yaml
    needs:
      - hugo-docs-build
    with:
      docs-build-label: 'main'
      download-artifacts: true
      ref: 'main'
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  # Publish the Hugo docs site to GitHub Pages unless dry-run is enabled
  hugo-docs-publish:
    name: Hugo Docs Publish
    if: ${{ inputs.dry-run-enabled != 'true' && !cancelled() && !failure() }}
    needs:
      - prepare-release
      - hugo-docs-build-main
    uses: ./.github/workflows/zxc-hugo-publish.yaml
    with:
      docs-build-label: 'v${{ needs.prepare-release.outputs.version }}'
      dry-run-enabled: ${{ inputs.dry-run-enabled }}
      attach-docs-enabled: true
