##
# Copyright (C) 2023-2024 Hedera Hashgraph, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

name: "PR Checks"
on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

defaults:
  run:
    shell: bash

concurrency:
  group: pr-checks-${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  generate_matrix:
    runs-on: hiero-solo-linux-medium
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Read JSON and Set Matrix Output
        id: set_matrix
        run: |
          # Install jq (a lightweight and flexible command-line JSON processor)
          sudo apt-get update && sudo apt-get install -y jq

          # Read the JSON file
          JSON_CONTENT=$(cat .github/workflows/support/e2e-test-matrix.json | jq -c .)
          
          echo "JSON_CONTENT: $JSON_CONTENT"

          # Set the output variable 'matrix' with the JSON content
          echo "matrix=$JSON_CONTENT" >> $GITHUB_OUTPUT

  code-style:
    name: Code Style
    uses: ./.github/workflows/zxc-code-style.yaml
    with:
      custom-job-label: Standard

  unit-tests:
    name: Unit Tests
    uses: ./.github/workflows/zxc-unit-test.yaml
    needs:
      - code-style
    with:
      custom-job-label: Standard

  update-readme:
    name: "Update README.md"
    if: ${{ github.actor != 'dependabot[bot]' && !cancelled() && always() }}
    uses: ./.github/workflows/zxc-update-readme.yaml
    with:
      commit-changes: false
    secrets:
      GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
      GH_ACCESS_GPG_KEY: ${{ secrets.GH_ACCESS_GPG_KEY }}
      GH_ACCESS_PASSPHRASE: ${{ secrets.GH_ACCESS_PASSPHRASE }}

  e2e-tests:
    name: E2E Tests (${{ matrix.e2e-test-type.name }})
    if: ${{ !cancelled() && always() }}
    uses: ./.github/workflows/zxc-e2e-test.yaml
    needs:
      - generate_matrix
      - code-style
    strategy:
      fail-fast: false
      matrix:
        e2e-test-type: ${{ fromJSON(needs.generate_matrix.outputs.matrix) }}
      max-parallel: 5
    with:
      custom-job-label: ${{ matrix.e2e-test-type.name }}
      test-script: ${{ matrix.e2e-test-type.test-script }}
      coverage-subdirectory: ${{ matrix.e2e-test-type.coverage-subdirectory }}
      coverage-report-name: ${{ matrix.e2e-test-type.coverage-report-name }}
      cluster-name: ${{ matrix.e2e-test-type.coverage-subdirectory }}-${{ github.run_id }}-${{ github.run_attempt }}

  codecov:
    name: CodeCov
    uses: ./.github/workflows/zxc-code-analysis.yaml
    needs:
      - unit-tests
      - e2e-tests
    if: ${{ github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name }}
    with:
      custom-job-label: Standard
      enable-codecov-analysis: true
      enable-e2e-coverage-report: true
    secrets:
      codecov-token: ${{ secrets.CODECOV_TOKEN }}

  codacy-coverage:
    name: Codacy
    uses: ./.github/workflows/zxc-code-analysis.yaml
    needs:
      - unit-tests
      - e2e-tests
    if: ${{ github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name }}
    with:
      custom-job-label: Coverage
      enable-codacy-coverage: true
      enable-e2e-coverage-report: true
    secrets:
      codacy-project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
